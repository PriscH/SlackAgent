
package com.prisch.sbm.stubs;

import java.math.BigInteger;
import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "sbmappservices72PortType", targetNamespace = "http://localhost:80/gsoap/sbmappservices72.wsdl")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface Sbmappservices72PortType {


    /**
     * Logs out the current active session, releasing license.
     * 
     * @param auth
     * @param options
     * @throws AEWebservicesFaultFault
     */
    @WebMethod(operationName = "Logout")
    @RequestWrapper(localName = "Logout", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.Logout")
    @ResponseWrapper(localName = "LogoutResponse", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.LogoutResponse")
    public void logout(
            @WebParam(name = "auth", targetNamespace = "urn:sbmappservices72")
            Auth auth,
            @WebParam(name = "options", targetNamespace = "urn:sbmappservices72")
            Options options)
        throws AEWebservicesFaultFault
    ;

    /**
     * Gets the server version.
     * 
     * @return
     *     returns java.lang.String
     * @throws AEWebservicesFaultFault
     */
    @WebMethod(operationName = "GetVersion")
    @WebResult(targetNamespace = "urn:sbmappservices72")
    @RequestWrapper(localName = "GetVersion", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.GetVersion")
    @ResponseWrapper(localName = "GetVersionResponse", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.GetVersionResponse")
    public String getVersion()
        throws AEWebservicesFaultFault
    ;

    /**
     * Gets the list of available applications.
     * 
     * @param auth
     * @param options
     * @return
     *     returns java.util.List<com.prisch.sbm.stubs.ApplicationData>
     * @throws AEWebservicesFaultFault
     */
    @WebMethod(operationName = "GetApplications")
    @WebResult(targetNamespace = "urn:sbmappservices72")
    @RequestWrapper(localName = "GetApplications", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.GetApplications")
    @ResponseWrapper(localName = "GetApplicationsResponse", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.GetApplicationsResponse")
    public List<ApplicationData> getApplications(
            @WebParam(name = "auth", targetNamespace = "urn:sbmappservices72")
            Auth auth,
            @WebParam(name = "options", targetNamespace = "urn:sbmappservices72")
            Options options)
        throws AEWebservicesFaultFault
    ;

    /**
     * Gets the list of available solutions.
     * 
     * @param auth
     * @param options
     * @return
     *     returns java.util.List<com.prisch.sbm.stubs.SolutionData>
     * @throws AEWebservicesFaultFault
     */
    @WebMethod(operationName = "GetSolutions")
    @WebResult(targetNamespace = "urn:sbmappservices72")
    @RequestWrapper(localName = "GetSolutions", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.GetSolutions")
    @ResponseWrapper(localName = "GetSolutionsResponse", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.GetSolutionsResponse")
    public List<SolutionData> getSolutions(
            @WebParam(name = "auth", targetNamespace = "urn:sbmappservices72")
            Auth auth,
            @WebParam(name = "options", targetNamespace = "urn:sbmappservices72")
            Options options)
        throws AEWebservicesFaultFault
    ;

    /**
     * Gets the list of available tables, optionally filtered by solution and/or table type.
     * 
     * @param tableType
     * @param solution
     * @param auth
     * @param options
     * @return
     *     returns java.util.List<com.prisch.sbm.stubs.TableData>
     * @throws AEWebservicesFaultFault
     */
    @WebMethod(operationName = "GetTables")
    @WebResult(targetNamespace = "urn:sbmappservices72")
    @RequestWrapper(localName = "GetTables", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.GetTables")
    @ResponseWrapper(localName = "GetTablesResponse", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.GetTablesResponse")
    public List<TableData> getTables(
            @WebParam(name = "auth", targetNamespace = "urn:sbmappservices72")
            Auth auth,
            @WebParam(name = "solution", targetNamespace = "urn:sbmappservices72")
            SolutionIdentifier solution,
            @WebParam(name = "tableType", targetNamespace = "urn:sbmappservices72")
            TableType tableType,
            @WebParam(name = "options", targetNamespace = "urn:sbmappservices72")
            Options options)
        throws AEWebservicesFaultFault
    ;

    /**
     * Gets a filtered list of reports.
     * 
     * @param auth
     * @param reportsFilter
     * @param options
     * @param queryRange
     * @return
     *     returns com.prisch.sbm.stubs.GetReportsResult
     * @throws AEWebservicesFaultFault
     */
    @WebMethod(operationName = "GetReports")
    @WebResult(targetNamespace = "urn:sbmappservices72")
    @RequestWrapper(localName = "GetReports", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.GetReports")
    @ResponseWrapper(localName = "GetReportsResponse", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.GetReportsResponse")
    public GetReportsResult getReports(
            @WebParam(name = "auth", targetNamespace = "urn:sbmappservices72")
            Auth auth,
            @WebParam(name = "queryRange", targetNamespace = "urn:sbmappservices72")
            QueryRange queryRange,
            @WebParam(name = "reportsFilter", targetNamespace = "urn:sbmappservices72")
            ReportsFilter reportsFilter,
            @WebParam(name = "options", targetNamespace = "urn:sbmappservices72")
            Options options)
        throws AEWebservicesFaultFault
    ;

    /**
     * Runs a specified report.
     * 
     * @param solution
     * @param auth
     * @param report
     * @param options
     * @param project
     * @param reportCategory
     * @param reportAccessLevel
     * @param table
     * @param queryRange
     * @return
     *     returns com.prisch.sbm.stubs.RunReportResult
     * @throws AEWebservicesFaultFault
     */
    @WebMethod(operationName = "RunReport")
    @WebResult(targetNamespace = "urn:sbmappservices72")
    @RequestWrapper(localName = "RunReport", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.RunReport")
    @ResponseWrapper(localName = "RunReportResponse", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.RunReportResponse")
    public RunReportResult runReport(
            @WebParam(name = "auth", targetNamespace = "urn:sbmappservices72")
            Auth auth,
            @WebParam(name = "queryRange", targetNamespace = "urn:sbmappservices72")
            QueryRange queryRange,
            @WebParam(name = "report", targetNamespace = "urn:sbmappservices72")
            ReportIdentifier report,
            @WebParam(name = "solution", targetNamespace = "urn:sbmappservices72")
            SolutionIdentifier solution,
            @WebParam(name = "project", targetNamespace = "urn:sbmappservices72")
            ProjectIdentifier project,
            @WebParam(name = "table", targetNamespace = "urn:sbmappservices72")
            TableIdentifier table,
            @WebParam(name = "reportCategory", targetNamespace = "urn:sbmappservices72")
            ReportCategory reportCategory,
            @WebParam(name = "reportAccessLevel", targetNamespace = "urn:sbmappservices72")
            ReportAccessLevel reportAccessLevel,
            @WebParam(name = "options", targetNamespace = "urn:sbmappservices72")
            Options options)
        throws AEWebservicesFaultFault
    ;

    /**
     * Service definition of function ae__RunReportXml
     * 
     * @param auth
     * @param report
     * @param options
     * @return
     *     returns com.prisch.sbm.stubs.RunReportXmlResult
     */
    @WebMethod(operationName = "RunReportXml")
    @WebResult(targetNamespace = "urn:sbmappservices72")
    @RequestWrapper(localName = "RunReportXml", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.RunReportXml")
    @ResponseWrapper(localName = "RunReportXmlResponse", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.RunReportXmlResponse")
    public RunReportXmlResult runReportXml(
            @WebParam(name = "auth", targetNamespace = "urn:sbmappservices72")
            Auth auth,
            @WebParam(name = "report", targetNamespace = "urn:sbmappservices72")
            ReportData report,
            @WebParam(name = "options", targetNamespace = "urn:sbmappservices72")
            Options options);

    /**
     * Gets the list of available projects available for submitting new items, optionally filtered by table id.
     * 
     * @param auth
     * @param options
     * @param table
     * @return
     *     returns java.util.List<com.prisch.sbm.stubs.ProjectData>
     * @throws AEWebservicesFaultFault
     */
    @WebMethod(operationName = "GetSubmitProjects")
    @WebResult(targetNamespace = "urn:sbmappservices72")
    @RequestWrapper(localName = "GetSubmitProjects", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.GetSubmitProjects")
    @ResponseWrapper(localName = "GetSubmitProjectsResponse", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.GetSubmitProjectsResponse")
    public List<ProjectData> getSubmitProjects(
            @WebParam(name = "auth", targetNamespace = "urn:sbmappservices72")
            Auth auth,
            @WebParam(name = "table", targetNamespace = "urn:sbmappservices72")
            TableIdentifier table,
            @WebParam(name = "options", targetNamespace = "urn:sbmappservices72")
            Options options)
        throws AEWebservicesFaultFault
    ;

    /**
     * Creates a new item, given a project and item data.  Creates the item as a sub-item if a parent item is specified.
     * 
     * @param item
     * @param auth
     * @param submitTransition
     * @param parentItem
     * @param options
     * @param project
     * @return
     *     returns com.prisch.sbm.stubs.TTItemHolder
     * @throws AEWebservicesFaultFault
     */
    @WebMethod(operationName = "CreatePrimaryItem")
    @WebResult(targetNamespace = "urn:sbmappservices72")
    @RequestWrapper(localName = "CreatePrimaryItem", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.CreatePrimaryItem")
    @ResponseWrapper(localName = "CreatePrimaryItemResponse", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.CreatePrimaryItemResponse")
    public TTItemHolder createPrimaryItem(
            @WebParam(name = "auth", targetNamespace = "urn:sbmappservices72")
            Auth auth,
            @WebParam(name = "project", targetNamespace = "urn:sbmappservices72")
            ProjectIdentifier project,
            @WebParam(name = "parentItem", targetNamespace = "urn:sbmappservices72")
            ItemIdentifier parentItem,
            @WebParam(name = "item", targetNamespace = "urn:sbmappservices72")
            TTItem item,
            @WebParam(name = "submitTransition", targetNamespace = "urn:sbmappservices72")
            TransitionIdentifier submitTransition,
            @WebParam(name = "options", targetNamespace = "urn:sbmappservices72")
            ResponseItemOptions options)
        throws AEWebservicesFaultFault
    ;

    /**
     * Creates new item(s), given a project and item data.  Creates the item(s) as sub-items if a parent item is specified.
     * 
     * @param item
     * @param auth
     * @param submitTransition
     * @param parentItem
     * @param options
     * @param project
     * @return
     *     returns java.util.List<com.prisch.sbm.stubs.TTItemHolder>
     * @throws AEWebservicesFaultFault
     */
    @WebMethod(operationName = "CreatePrimaryItems")
    @WebResult(targetNamespace = "urn:sbmappservices72")
    @RequestWrapper(localName = "CreatePrimaryItems", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.CreatePrimaryItems")
    @ResponseWrapper(localName = "CreatePrimaryItemsResponse", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.CreatePrimaryItemsResponse")
    public List<TTItemHolder> createPrimaryItems(
            @WebParam(name = "auth", targetNamespace = "urn:sbmappservices72")
            Auth auth,
            @WebParam(name = "project", targetNamespace = "urn:sbmappservices72")
            ProjectIdentifier project,
            @WebParam(name = "parentItem", targetNamespace = "urn:sbmappservices72")
            ItemIdentifier parentItem,
            @WebParam(name = "item", targetNamespace = "urn:sbmappservices72")
            List<TTItem> item,
            @WebParam(name = "submitTransition", targetNamespace = "urn:sbmappservices72")
            TransitionIdentifier submitTransition,
            @WebParam(name = "options", targetNamespace = "urn:sbmappservices72")
            MultipleResponseItemOptions options)
        throws AEWebservicesFaultFault
    ;

    /**
     * Links one item to another as a sub-task.
     * 
     * @param childItem
     * @param auth
     * @param parentItem
     * @param options
     * @throws AEWebservicesFaultFault
     */
    @WebMethod(operationName = "LinkSubtask")
    @RequestWrapper(localName = "LinkSubtask", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.LinkSubtask")
    @ResponseWrapper(localName = "LinkSubtaskResponse", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.LinkSubtaskResponse")
    public void linkSubtask(
            @WebParam(name = "auth", targetNamespace = "urn:sbmappservices72")
            Auth auth,
            @WebParam(name = "parentItem", targetNamespace = "urn:sbmappservices72")
            ItemIdentifier parentItem,
            @WebParam(name = "childItem", targetNamespace = "urn:sbmappservices72")
            ItemIdentifier childItem,
            @WebParam(name = "options", targetNamespace = "urn:sbmappservices72")
            Options options)
        throws AEWebservicesFaultFault
    ;

    /**
     * Creates a new aux item, given a table id and item data.
     * 
     * @param item
     * @param auth
     * @param options
     * @param table
     * @return
     *     returns com.prisch.sbm.stubs.TTItemHolder
     * @throws AEWebservicesFaultFault
     */
    @WebMethod(operationName = "CreateAuxItem")
    @WebResult(targetNamespace = "urn:sbmappservices72")
    @RequestWrapper(localName = "CreateAuxItem", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.CreateAuxItem")
    @ResponseWrapper(localName = "CreateAuxItemResponse", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.CreateAuxItemResponse")
    public TTItemHolder createAuxItem(
            @WebParam(name = "auth", targetNamespace = "urn:sbmappservices72")
            Auth auth,
            @WebParam(name = "table", targetNamespace = "urn:sbmappservices72")
            TableIdentifier table,
            @WebParam(name = "item", targetNamespace = "urn:sbmappservices72")
            TTItem item,
            @WebParam(name = "options", targetNamespace = "urn:sbmappservices72")
            ResponseItemOptions options)
        throws AEWebservicesFaultFault
    ;

    /**
     * Service definition of function ae__CreateAuxItems
     * 
     * @param item
     * @param auth
     * @param options
     * @param table
     * @return
     *     returns java.util.List<com.prisch.sbm.stubs.TTItemHolder>
     * @throws AEWebservicesFaultFault
     */
    @WebMethod(operationName = "CreateAuxItems")
    @WebResult(targetNamespace = "urn:sbmappservices72")
    @RequestWrapper(localName = "CreateAuxItems", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.CreateAuxItems")
    @ResponseWrapper(localName = "CreateAuxItemsResponse", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.CreateAuxItemsResponse")
    public List<TTItemHolder> createAuxItems(
            @WebParam(name = "auth", targetNamespace = "urn:sbmappservices72")
            Auth auth,
            @WebParam(name = "table", targetNamespace = "urn:sbmappservices72")
            TableIdentifier table,
            @WebParam(name = "item", targetNamespace = "urn:sbmappservices72")
            List<TTItem> item,
            @WebParam(name = "options", targetNamespace = "urn:sbmappservices72")
            MultipleResponseItemOptions options)
        throws AEWebservicesFaultFault
    ;

    /**
     * Creates a new attachment, given item id of the item to which it is to be attached, and the file attachment contents.
     * 
     * @param item
     * @param auth
     * @param options
     * @param attachmentContents
     * @return
     *     returns com.prisch.sbm.stubs.FileAttachment
     * @throws AEWebservicesFaultFault
     */
    @WebMethod(operationName = "CreateFileAttachment")
    @WebResult(targetNamespace = "urn:sbmappservices72")
    @RequestWrapper(localName = "CreateFileAttachment", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.CreateFileAttachment")
    @ResponseWrapper(localName = "CreateFileAttachmentResponse", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.CreateFileAttachmentResponse")
    public FileAttachment createFileAttachment(
            @WebParam(name = "auth", targetNamespace = "urn:sbmappservices72")
            Auth auth,
            @WebParam(name = "item", targetNamespace = "urn:sbmappservices72")
            ItemIdentifier item,
            @WebParam(name = "attachmentContents", targetNamespace = "urn:sbmappservices72")
            FileAttachmentContents attachmentContents,
            @WebParam(name = "options", targetNamespace = "urn:sbmappservices72")
            Options options)
        throws AEWebservicesFaultFault
    ;

    /**
     * attaches note.
     * 
     * @param item
     * @param noteContents
     * @param auth
     * @param author
     * @return
     *     returns boolean
     * @throws AEWebservicesFaultFault
     */
    @WebMethod(operationName = "CreateNoteAttachment")
    @WebResult(targetNamespace = "urn:sbmappservices72")
    @RequestWrapper(localName = "CreateNoteAttachment", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.CreateNoteAttachment")
    @ResponseWrapper(localName = "CreateNoteAttachmentResponse", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.CreateNoteAttachmentResponse")
    public boolean createNoteAttachment(
            @WebParam(name = "auth", targetNamespace = "urn:sbmappservices72")
            Auth auth,
            @WebParam(name = "item", targetNamespace = "urn:sbmappservices72")
            ItemIdentifier item,
            @WebParam(name = "author", targetNamespace = "urn:sbmappservices72")
            UserIdentifier author,
            @WebParam(name = "noteContents", targetNamespace = "urn:sbmappservices72")
            NoteAttachmentContents noteContents)
        throws AEWebservicesFaultFault
    ;

    /**
     * Gets item, given an item id.
     * 
     * @param itemId
     * @param auth
     * @param options
     * @return
     *     returns com.prisch.sbm.stubs.TTItemHolder
     * @throws AEWebservicesFaultFault
     */
    @WebMethod(operationName = "GetItem")
    @WebResult(targetNamespace = "urn:sbmappservices72")
    @RequestWrapper(localName = "GetItem", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.GetItem")
    @ResponseWrapper(localName = "GetItemResponse", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.GetItemResponse")
    public TTItemHolder getItem(
            @WebParam(name = "auth", targetNamespace = "urn:sbmappservices72")
            Auth auth,
            @WebParam(name = "itemId", targetNamespace = "urn:sbmappservices72")
            ItemIdentifier itemId,
            @WebParam(name = "options", targetNamespace = "urn:sbmappservices72")
            ResponseItemOptions options)
        throws AEWebservicesFaultFault
    ;

    /**
     * Gets items, given a list of item ids.
     * 
     * @param itemId
     * @param auth
     * @param options
     * @return
     *     returns java.util.List<com.prisch.sbm.stubs.TTItemHolder>
     * @throws AEWebservicesFaultFault
     */
    @WebMethod(operationName = "GetItems")
    @WebResult(targetNamespace = "urn:sbmappservices72")
    @RequestWrapper(localName = "GetItems", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.GetItems")
    @ResponseWrapper(localName = "GetItemsResponse", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.GetItemsResponse")
    public List<TTItemHolder> getItems(
            @WebParam(name = "auth", targetNamespace = "urn:sbmappservices72")
            Auth auth,
            @WebParam(name = "itemId", targetNamespace = "urn:sbmappservices72")
            List<ItemIdentifier> itemId,
            @WebParam(name = "options", targetNamespace = "urn:sbmappservices72")
            MultipleResponseItemOptions options)
        throws AEWebservicesFaultFault
    ;

    /**
     * Gets a list of existing items, given a table id, a query where clause, an order by clause (optional) and a maximum return list size.
     * 
     * @param auth
     * @param queryWhereClause
     * @param maxReturnSize
     * @param options
     * @param orderByClause
     * @param firstRecord
     * @param table
     * @return
     *     returns com.prisch.sbm.stubs.TTItemList
     * @throws AEWebservicesFaultFault
     */
    @WebMethod(operationName = "GetItemsByQuery")
    @WebResult(targetNamespace = "urn:sbmappservices72")
    @RequestWrapper(localName = "GetItemsByQuery", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.GetItemsByQuery")
    @ResponseWrapper(localName = "GetItemsByQueryResponse", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.GetItemsByQueryResponse")
    public TTItemList getItemsByQuery(
            @WebParam(name = "auth", targetNamespace = "urn:sbmappservices72")
            Auth auth,
            @WebParam(name = "table", targetNamespace = "urn:sbmappservices72")
            TableIdentifier table,
            @WebParam(name = "queryWhereClause", targetNamespace = "urn:sbmappservices72")
            String queryWhereClause,
            @WebParam(name = "orderByClause", targetNamespace = "urn:sbmappservices72")
            String orderByClause,
            @WebParam(name = "firstRecord", targetNamespace = "urn:sbmappservices72")
            BigInteger firstRecord,
            @WebParam(name = "maxReturnSize", targetNamespace = "urn:sbmappservices72")
            BigInteger maxReturnSize,
            @WebParam(name = "options", targetNamespace = "urn:sbmappservices72")
            MultipleResponseItemOptions options)
        throws AEWebservicesFaultFault
    ;

    /**
     * Gets an existing file attachment, given an item id and attachment id.
     * 
     * @param item
     * @param auth
     * @param options
     * @param attachmentID
     * @return
     *     returns com.prisch.sbm.stubs.FileAttachmentContents
     * @throws AEWebservicesFaultFault
     */
    @WebMethod(operationName = "GetFileAttachment")
    @WebResult(targetNamespace = "urn:sbmappservices72")
    @RequestWrapper(localName = "GetFileAttachment", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.GetFileAttachment")
    @ResponseWrapper(localName = "GetFileAttachmentResponse", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.GetFileAttachmentResponse")
    public FileAttachmentContents getFileAttachment(
            @WebParam(name = "auth", targetNamespace = "urn:sbmappservices72")
            Auth auth,
            @WebParam(name = "item", targetNamespace = "urn:sbmappservices72")
            ItemIdentifier item,
            @WebParam(name = "attachmentID", targetNamespace = "urn:sbmappservices72")
            BigInteger attachmentID,
            @WebParam(name = "options", targetNamespace = "urn:sbmappservices72")
            Options options)
        throws AEWebservicesFaultFault
    ;

    /**
     * Transitions existing item, given the the item id, plus any data to update, and transition id to use a non-default transition.
     * 
     * @param breakLock
     * @param item
     * @param auth
     * @param options
     * @param transition
     * @return
     *     returns com.prisch.sbm.stubs.TTItemHolder
     * @throws AEWebservicesFaultFault
     */
    @WebMethod(operationName = "TransitionItem")
    @WebResult(targetNamespace = "urn:sbmappservices72")
    @RequestWrapper(localName = "TransitionItem", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.TransitionItem")
    @ResponseWrapper(localName = "TransitionItemResponse", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.TransitionItemResponse")
    public TTItemHolder transitionItem(
            @WebParam(name = "auth", targetNamespace = "urn:sbmappservices72")
            Auth auth,
            @WebParam(name = "item", targetNamespace = "urn:sbmappservices72")
            TTItem item,
            @WebParam(name = "transition", targetNamespace = "urn:sbmappservices72")
            TransitionIdentifier transition,
            @WebParam(name = "breakLock", targetNamespace = "urn:sbmappservices72")
            boolean breakLock,
            @WebParam(name = "options", targetNamespace = "urn:sbmappservices72")
            ResponseItemOptions options)
        throws AEWebservicesFaultFault
    ;

    /**
     * Transitions existing items, given the item ids, plus any data to update, and transition id to use a non-default transition.
     * 
     * @param breakLock
     * @param item
     * @param auth
     * @param options
     * @param transition
     * @return
     *     returns java.util.List<com.prisch.sbm.stubs.TTItemHolder>
     * @throws AEWebservicesFaultFault
     */
    @WebMethod(operationName = "TransitionItems")
    @WebResult(targetNamespace = "urn:sbmappservices72")
    @RequestWrapper(localName = "TransitionItems", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.TransitionItems")
    @ResponseWrapper(localName = "TransitionItemsResponse", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.TransitionItemsResponse")
    public List<TTItemHolder> transitionItems(
            @WebParam(name = "auth", targetNamespace = "urn:sbmappservices72")
            Auth auth,
            @WebParam(name = "item", targetNamespace = "urn:sbmappservices72")
            List<TTItem> item,
            @WebParam(name = "transition", targetNamespace = "urn:sbmappservices72")
            TransitionIdentifier transition,
            @WebParam(name = "breakLock", targetNamespace = "urn:sbmappservices72")
            boolean breakLock,
            @WebParam(name = "options", targetNamespace = "urn:sbmappservices72")
            MultipleResponseItemOptions options)
        throws AEWebservicesFaultFault
    ;

    /**
     * Return available transitions, given an item id and attribute name (may be null or empty).
     * 
     * @param item
     * @param auth
     * @param options
     * @param attributeName
     * @param transitionOptions
     * @return
     *     returns java.util.List<com.prisch.sbm.stubs.Transition>
     * @throws AEWebservicesFaultFault
     */
    @WebMethod(operationName = "GetAvailableTransitions")
    @WebResult(targetNamespace = "urn:sbmappservices72")
    @RequestWrapper(localName = "GetAvailableTransitions", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.GetAvailableTransitions")
    @ResponseWrapper(localName = "GetAvailableTransitionsResponse", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.GetAvailableTransitionsResponse")
    public List<Transition> getAvailableTransitions(
            @WebParam(name = "auth", targetNamespace = "urn:sbmappservices72")
            Auth auth,
            @WebParam(name = "item", targetNamespace = "urn:sbmappservices72")
            ItemIdentifier item,
            @WebParam(name = "transitionOptions", targetNamespace = "urn:sbmappservices72")
            GetTransitionOptions transitionOptions,
            @WebParam(name = "attributeName", targetNamespace = "urn:sbmappservices72")
            String attributeName,
            @WebParam(name = "options", targetNamespace = "urn:sbmappservices72")
            Options options)
        throws AEWebservicesFaultFault
    ;

    /**
     * Return available Submit transitions, given an item id and attribute name (may be null or empty).
     * 
     * @param auth
     * @param options
     * @param project
     * @param attributeName
     * @return
     *     returns java.util.List<com.prisch.sbm.stubs.Transition>
     * @throws AEWebservicesFaultFault
     */
    @WebMethod(operationName = "GetAvailableSubmitTransitions")
    @WebResult(targetNamespace = "urn:sbmappservices72")
    @RequestWrapper(localName = "GetAvailableSubmitTransitions", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.GetAvailableSubmitTransitions")
    @ResponseWrapper(localName = "GetAvailableSubmitTransitionsResponse", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.GetAvailableSubmitTransitionsResponse")
    public List<Transition> getAvailableSubmitTransitions(
            @WebParam(name = "auth", targetNamespace = "urn:sbmappservices72")
            Auth auth,
            @WebParam(name = "project", targetNamespace = "urn:sbmappservices72")
            ProjectIdentifier project,
            @WebParam(name = "attributeName", targetNamespace = "urn:sbmappservices72")
            String attributeName,
            @WebParam(name = "options", targetNamespace = "urn:sbmappservices72")
            Options options)
        throws AEWebservicesFaultFault
    ;

    /**
     * Updates an existing attachment, given item id, and the file attachment contents.
     * 
     * @param item
     * @param auth
     * @param options
     * @param attachmentContents
     * @return
     *     returns com.prisch.sbm.stubs.FileAttachment
     * @throws AEWebservicesFaultFault
     */
    @WebMethod(operationName = "UpdateFileAttachment")
    @WebResult(targetNamespace = "urn:sbmappservices72")
    @RequestWrapper(localName = "UpdateFileAttachment", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.UpdateFileAttachment")
    @ResponseWrapper(localName = "UpdateFileAttachmentResponse", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.UpdateFileAttachmentResponse")
    public FileAttachment updateFileAttachment(
            @WebParam(name = "auth", targetNamespace = "urn:sbmappservices72")
            Auth auth,
            @WebParam(name = "item", targetNamespace = "urn:sbmappservices72")
            ItemIdentifier item,
            @WebParam(name = "attachmentContents", targetNamespace = "urn:sbmappservices72")
            FileAttachmentContents attachmentContents,
            @WebParam(name = "options", targetNamespace = "urn:sbmappservices72")
            Options options)
        throws AEWebservicesFaultFault
    ;

    /**
     * Service definition of function ae__DeleteItems
     * 
     * @param itemId
     * @param auth
     * @param options
     * @return
     *     returns java.util.List<com.prisch.sbm.stubs.Status>
     */
    @WebMethod(operationName = "DeleteItems")
    @WebResult(targetNamespace = "urn:sbmappservices72")
    @RequestWrapper(localName = "DeleteItems", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.DeleteItems")
    @ResponseWrapper(localName = "DeleteItemsResponse", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.DeleteItemsResponse")
    public List<Status> deleteItems(
            @WebParam(name = "auth", targetNamespace = "urn:sbmappservices72")
            Auth auth,
            @WebParam(name = "itemId", targetNamespace = "urn:sbmappservices72")
            List<ItemIdentifier> itemId,
            @WebParam(name = "options", targetNamespace = "urn:sbmappservices72")
            MultipleOptions options);

    /**
     * Deletes one or more items, given a table id and a query where clause.
     * 
     * @param auth
     * @param queryWhereClause
     * @param options
     * @param table
     * @throws AEWebservicesFaultFault
     */
    @WebMethod(operationName = "DeleteItemsByQuery")
    @RequestWrapper(localName = "DeleteItemsByQuery", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.DeleteItemsByQuery")
    @ResponseWrapper(localName = "DeleteItemsByQueryResponse", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.DeleteItemsByQueryResponse")
    public void deleteItemsByQuery(
            @WebParam(name = "auth", targetNamespace = "urn:sbmappservices72")
            Auth auth,
            @WebParam(name = "table", targetNamespace = "urn:sbmappservices72")
            TableIdentifier table,
            @WebParam(name = "queryWhereClause", targetNamespace = "urn:sbmappservices72")
            String queryWhereClause,
            @WebParam(name = "options", targetNamespace = "urn:sbmappservices72")
            MultipleOptions options)
        throws AEWebservicesFaultFault
    ;

    /**
     * Deletes an existing attachment, which may be a note, item link, URL attachment or file attachment, given an attachment id.
     * 
     * @param auth
     * @param options
     * @param attachmentID
     * @throws AEWebservicesFaultFault
     */
    @WebMethod(operationName = "DeleteAttachment")
    @RequestWrapper(localName = "DeleteAttachment", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.DeleteAttachment")
    @ResponseWrapper(localName = "DeleteAttachmentResponse", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.DeleteAttachmentResponse")
    public void deleteAttachment(
            @WebParam(name = "auth", targetNamespace = "urn:sbmappservices72")
            Auth auth,
            @WebParam(name = "attachmentID", targetNamespace = "urn:sbmappservices72")
            BigInteger attachmentID,
            @WebParam(name = "options", targetNamespace = "urn:sbmappservices72")
            Options options)
        throws AEWebservicesFaultFault
    ;

    /**
     * Returns note logger information.
     * 
     * @param auth
     * @param options
     * @return
     *     returns com.prisch.sbm.stubs.NoteLoggerInfo
     * @throws AEWebservicesFaultFault
     */
    @WebMethod(operationName = "GetNoteLoggerInfo")
    @WebResult(targetNamespace = "urn:sbmappservices72")
    @RequestWrapper(localName = "GetNoteLoggerInfo", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.GetNoteLoggerInfo")
    @ResponseWrapper(localName = "GetNoteLoggerInfoResponse", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.GetNoteLoggerInfoResponse")
    public NoteLoggerInfo getNoteLoggerInfo(
            @WebParam(name = "auth", targetNamespace = "urn:sbmappservices72")
            Auth auth,
            @WebParam(name = "options", targetNamespace = "urn:sbmappservices72")
            Options options)
        throws AEWebservicesFaultFault
    ;

    /**
     * Gets the state change history of an existing item, given a table id and internal item id.
     * 
     * @param item
     * @param auth
     * @param options
     * @param queryRange
     * @return
     *     returns com.prisch.sbm.stubs.GetStateChangeHistoryResult
     * @throws AEWebservicesFaultFault
     */
    @WebMethod(operationName = "GetStateChangeHistory")
    @WebResult(targetNamespace = "urn:sbmappservices72")
    @RequestWrapper(localName = "GetStateChangeHistory", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.GetStateChangeHistory")
    @ResponseWrapper(localName = "GetStateChangeHistoryResponse", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.GetStateChangeHistoryResponse")
    public GetStateChangeHistoryResult getStateChangeHistory(
            @WebParam(name = "auth", targetNamespace = "urn:sbmappservices72")
            Auth auth,
            @WebParam(name = "item", targetNamespace = "urn:sbmappservices72")
            ItemIdentifier item,
            @WebParam(name = "queryRange", targetNamespace = "urn:sbmappservices72")
            QueryRange queryRange,
            @WebParam(name = "options", targetNamespace = "urn:sbmappservices72")
            Options options)
        throws AEWebservicesFaultFault
    ;

    /**
     * Returns user information one or more users.  If getCurrentUser is true, then information about the current user is returned.
     * 
     * @param getCurrentUser
     * @param auth
     * @param searchByName
     * @param options
     * @param user
     * @return
     *     returns java.util.List<com.prisch.sbm.stubs.UserHolder>
     * @throws AEWebservicesFaultFault
     */
    @WebMethod(operationName = "GetUsers")
    @WebResult(targetNamespace = "urn:sbmappservices72")
    @RequestWrapper(localName = "GetUsers", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.GetUsers")
    @ResponseWrapper(localName = "GetUsersResponse", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.GetUsersResponse")
    public List<UserHolder> getUsers(
            @WebParam(name = "auth", targetNamespace = "urn:sbmappservices72")
            Auth auth,
            @WebParam(name = "getCurrentUser", targetNamespace = "urn:sbmappservices72")
            boolean getCurrentUser,
            @WebParam(name = "searchByName", targetNamespace = "urn:sbmappservices72")
            String searchByName,
            @WebParam(name = "user", targetNamespace = "urn:sbmappservices72")
            List<UserIdentifier> user,
            @WebParam(name = "options", targetNamespace = "urn:sbmappservices72")
            UserResponseOptions options)
        throws AEWebservicesFaultFault
    ;

    /**
     * Determine if the specified user is valid.
     * 
     * @param auth
     * @param options
     * @param user
     * @return
     *     returns boolean
     * @throws AEWebservicesFaultFault
     */
    @WebMethod(operationName = "IsUserValid")
    @WebResult(targetNamespace = "urn:sbmappservices72")
    @RequestWrapper(localName = "IsUserValid", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.IsUserValid")
    @ResponseWrapper(localName = "IsUserValidResponse", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.IsUserValidResponse")
    public boolean isUserValid(
            @WebParam(name = "auth", targetNamespace = "urn:sbmappservices72")
            Auth auth,
            @WebParam(name = "user", targetNamespace = "urn:sbmappservices72")
            UserIdentifier user,
            @WebParam(name = "options", targetNamespace = "urn:sbmappservices72")
            Options options)
        throws AEWebservicesFaultFault
    ;

    /**
     * Returns full list of possible selections for single- or multi-selection field.
     * 
     * @param field
     * @param auth
     * @param project
     * @return
     *     returns java.util.List<com.prisch.sbm.stubs.FieldSelectionsHolder>
     * @throws AEWebservicesFaultFault
     */
    @WebMethod(operationName = "GetFieldSelections")
    @WebResult(targetNamespace = "urn:sbmappservices72")
    @RequestWrapper(localName = "GetFieldSelections", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.GetFieldSelections")
    @ResponseWrapper(localName = "GetFieldSelectionsResponse", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.GetFieldSelectionsResponse")
    public List<FieldSelectionsHolder> getFieldSelections(
            @WebParam(name = "auth", targetNamespace = "urn:sbmappservices72")
            Auth auth,
            @WebParam(name = "field", targetNamespace = "urn:sbmappservices72")
            List<FieldIdentifier> field,
            @WebParam(name = "project", targetNamespace = "urn:sbmappservices72")
            ProjectIdentifier project)
        throws AEWebservicesFaultFault
    ;

    /**
     * Returns project workflows graphical data.
     * 
     * @param auth
     * @param project
     * @return
     *     returns java.util.List<com.prisch.sbm.stubs.WorkflowHolder>
     * @throws AEWebservicesFaultFault
     */
    @WebMethod(operationName = "GetWorkflows")
    @WebResult(targetNamespace = "urn:sbmappservices72")
    @RequestWrapper(localName = "GetWorkflows", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.GetWorkflows")
    @ResponseWrapper(localName = "GetWorkflowsResponse", targetNamespace = "urn:sbmappservices72", className = "com.prisch.sbm.stubs.GetWorkflowsResponse")
    public List<WorkflowHolder> getWorkflows(
            @WebParam(name = "auth", targetNamespace = "urn:sbmappservices72")
            Auth auth,
            @WebParam(name = "project", targetNamespace = "urn:sbmappservices72")
            List<ProjectIdentifier> project)
        throws AEWebservicesFaultFault
    ;

}
