plugins {
  id 'org.hidetake.ssh' version '2.7.0'
  id "com.github.dkorotych.gradle-maven-exec" version "0.4"
}

repositories {
   mavenLocal()
}

remotes {
  openshift {
    host = openshiftHost
    user = openshiftUser
    knownHosts = new File(openshiftKnownhosts)
    identity = new File(openshiftIdentity)
  }
  agent {
    host = agentHost
	  user = agentUser
	  password = agentPassword
	  knownHosts = new File(agentKnownhosts)
  }
}

def serverPath = 'server'
def agentPath = 'client'
def libraryPath = 'lib'

def agentResourcesPath = agentPassword + '/src/main/resources'

def openshiftPath = '../OpenShift/SlackAgent'
def openshiftResourcesPath = openshiftPath + '/src/main/resources'

task packServer {
  doLast {
    logger.lifecycle 'Clearing previous OpenShift project.'
    delete openshiftPath.concat('/pom.xml'), openshiftPath.concat('/src'), openshiftPath.concat('/.openshift')

    logger.lifecycle 'Copying server project to OpenShift project.'
    copy {
      from serverPath
      into openshiftPath
      exclude 'target', '*.iml'
    }

    logger.lifecycle 'Copying library project to OpenShift project.'
    copy { 
      from libraryPath.concat('/src')
      into openshiftPath.concat('/src')
      duplicatesStrategy = 'fail'
    }

    logger.lifecycle 'Setting up remote configuration.'
    copy { 
      from openshiftResourcesPath.concat('/server.properties.remote')
      into openshiftResourcesPath
      rename 'server.properties.remote', 'server.properties'
      duplicatesStrategy = 'include'
    }

    delete fileTree(openshiftResourcesPath) {
      include 'server.properties.*'
    }

    logger.lifecycle 'Merging POMs from parent project, server project and library project.'
    def parentPOM = new XmlParser().parse('pom.xml')
    def openshiftPOM = new XmlParser().parse(openshiftPath.concat('/pom.xml'))
    def libraryPOM = new XmlParser().parse(libraryPath.concat('/pom.xml'))

    // Remove the parent module and dependencies on the library
    def libDependency = openshiftPOM.dependencies.dependency.find { it.artifactId[0].value()[0] == 'slacklib' }
    openshiftPOM.dependencies[0].remove(libDependency)
    openshiftPOM.remove(openshiftPOM.parent)

    // Add the parent dependencies and plugins
    parentPOM.dependencies.dependency.each { openshiftPOM.dependencies[0].append(it) }
    parentPOM.build.plugins.plugin.each { openshiftPOM.build.plugins[0].append(it) }

    // Add the library dependencies
    libraryPOM.dependencies.dependency.each { openshiftPOM.dependencies[0].append(it) }

    file(openshiftPath.concat('/pom.xml')) withWriter { groovy.xml.XmlUtil.serialize(openshiftPOM, it) }

    logger.lifecycle 'The OpenShift project has been packaged.'
  }
}

task stopServer() {
  doLast {
    logger.lifecycle 'Stopping server.'
    ssh.run {
      session(remotes.openshift) {
        execute 'gear stop'
      }
    }
    logger.lifecycle 'Server has been stopped.'
  }
}

task deployServer(dependsOn: [packServer, stopServer]) {
  def git = { String... arguments ->
      exec {
        standardOutput = new ByteArrayOutputStream()
        workingDir openshiftPath
        executable 'git'
        args arguments
      }
  }

  doLast {
    logger.lifecycle 'Creating commit with changes.'
    git 'add', '-A'
    git 'commit', '-m', "Updated Deployment: ${new Date().format('yyyy-MM-dd hh:mm:ss')}"

    logger.lifecycle 'Deploying to OpenShift.'
    git 'push'

    logger.lifecycle 'The OpenShift server has been deployed.'
  }
}

task packAgent() {
  def copyProps = { source, target ->
      copy { 
        from agentResourcesPath.concat('/' + source)
        into agentResourcesPath
        rename source, target
        duplicatesStrategy = 'include'
      }
  }

  doLast {
    logger.lifecycle 'Setting up remote configuration.'
    copyProps 'client.properties.remote', 'client.properties'
    copyProps 'user.properties.remote', 'user.properties'

    logger.lifecycle 'Building agent.'
    mavenexec {
      workingDir file(agentPath)
      goals 'clean', 'compile', 'assembly:single'
      activateProfiles 'remote'
      quiet true
    }
    logger.lifecycle 'Agent has been built.'
  }
}

task stopAgent() {
  doLast {
    logger.lifecycle 'Stopping agent.'
    ssh.run {
      session(remotes.agent) {
        execute './stopagent.sh'
      }
    }
    logger.lifecycle 'Agent has been stopped.'
  }
}

task deployAgent(dependsOn: [packAgent, stopAgent]) {
  def agentSourcePath = agentPath + '/target/agent-jar-with-dependencies.jar'
  def agentDestinationPath = '/home/' + agentUser + '/slackagent.jar'

  doLast {
    ssh.run {
      session(remotes.agent) {
        logger.lifecycle 'Copying agent to host.'
        put from: agentSourcePath,
            into: agentDestinationPath
        
        logger.lifecycle 'Starting agent.'
        execute './startagent.sh'
      }
    }

    logger.lifecycle 'The agent has been deployed.'
  }
}

task deployAll(dependsOn: [deployServer, deployAgent])

stopServer.mustRunAfter stopAgent
deployAgent.mustRunAfter deployServer